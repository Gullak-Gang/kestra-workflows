# This flow will fetch posts from twitter and then perform Sentiment Analysis on them and then push the results to a DB
id: twitter_flow
namespace: hackfrost

inputs:
  - id: twitter_access_token
    required: true
    type: STRING

  - id: twitter_refresh_token
    required: true
    type: STRING

  - id: twitter_token_expires_at
    required: true
    type: STRING

  - id: hashtag
    required: true
    type: STRING

  - id: number_of_posts
    required: true
    type: STRING

  - id: user_id
    required: true
    type: STRING

tasks:
  - id: fetch_tweets
    type: io.kestra.plugin.twitter.GetTweets
    access_token: "{{ inputs.twitter_access_token }}"
    refresh_token: "{{ inputs.twitter_refresh_token }}"
    expires_at: "{{ inputs.twitter_token_expires_at }}"
    client_id: "{{ kv(twitter_client_id )}}"
    hashtag: "{{ inputs.hashtag }}"
    numberOfPosts: "{{ inputs.number_of_posts }}"

  - id: analysis
    type: io.kestra.plugin.sentiment_analysis.SentimentAnalysis
    api_key: "{{ kv('groq_api_key') }}"
    posts: "{{ outputs.fetch_tweets.uri }}"

  - id: append_platform_details
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - complete.json
    script: |
      import json

      def add_fields_to_json_array(input_file, output_file, user_id, platform):
          """
          Modifies each entry in a JSON array to add user_id and platform fields
          and writes the modified array to a new JSON file.

          Args:
              input_file (str): Path to the input JSON file containing a JSON array.
              output_file (str): Path to the output JSON file.
              user_id (str): The user ID to add to each entry.
              platform (str): The platform to add to each entry.
          """
          with open(input_file, 'r') as infile:
              data = json.load(infile)  # Load the JSON array
              
              # Validate that the input is a list
              if not isinstance(data, list):
                  raise ValueError("Input JSON file must contain a JSON array.")

              # Add fields to each entry in the array
              for entry in data:
                  entry['user_id'] = user_id
                  entry['platform'] = platform
          
          # Write the modified array to the output file
          with open(output_file, 'a') as outfile:
              json.dump(data, outfile, indent=4)

      if __name__ == "__main__":
          # Specify the input and output file paths
          input_file = "{{ outputs.analysis.uri }}"    # Replace with the path to your input JSON file
          output_file = "complete.json"  # Replace with the desired output JSON file path
          user_id = "{{ inputs.user_id }}"            # Specify the user_id to be added
          platform = "twitter"             # Specify the platform to be added
          
          # Call the function to process the file
          add_fields_to_json_array(input_file, output_file, user_id, platform)

          print(f"Modified file written to: {output_file}")



  - id: json_to_ion
    type: io.kestra.plugin.serdes.json.JsonToIon
    from: "{{ outputs.append_platform_details.outputFiles['complete.json'] }}"
    newLine: false # regular json

  - id: to_csv
    type: io.kestra.plugin.serdes.csv.IonToCsv
    from: "{{ outputs.json_to_ion.uri }}"
    
  - id: copy_in
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    url: {{ kv('postgres_url') }}
    username: {{ kv('postgres_username') }}
    password: {{ kv('postgres_password') }}
    format: CSV
    ssl: true
    table: "analysis_result_new"
    columns: 
      - sentiment
      - score
      - positive_word_count
      - negative_word_count
      - user_id
      - platform
    from: "{{ outputs.to_csv.uri }}"
    header: true
    delimiter: ","

